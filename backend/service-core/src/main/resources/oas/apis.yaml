openapi: 3.0.3
info:
  title: Budget App API
  description: APIs for managing the budget control app.
  version: 1.0.0
paths:
  /organizations:
    get:
      summary: Get all organizations
      operationId: getOrganizations
      tags:
        - Organizations
      responses:
        '200':
          description: A list of organizations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
        '500':
          description: Internal server error

    post:
      summary: Create a new organization
      operationId: createOrganization
      tags:
        - Organizations
      requestBody:
        description: Organization object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        '201':
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          description: Bad request (invalid data)
        '500':
          description: Internal server error

  /organizations/{name}:
    get:
      summary: Get an organization by ID
      operationId: getOrganizationById
      tags:
        - Organizations
      parameters:
        - name: name
          in: path
          required: true
          description: Business Name of the organization to fetch
          schema:
            type: string
      responses:
        '200':
          description: The organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          description: Organization not found
        '500':
          description: Internal server error

    put:
      summary: Update an existing organization
      operationId: updateOrganization
      tags:
        - Organizations
      parameters:
        - name: name
          in: path
          required: true
          description: Name of the organization to update
          schema:
            type: string
      requestBody:
        description: Organization object to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        '200':
          description: Organization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          description: Invalid data provided
        '404':
          description: Organization not found
        '500':
          description: Internal server error
    delete:
      summary: Delete an organization
      operationId: deleteOrganization
      tags:
        - Organizations
      parameters:
        - name: name
          in: path
          required: true
          description: Name of the organization to delete
          schema:
            type: string
      responses:
        '204':
          description: Organization deleted successfully
        '404':
          description: Organization not found
        '500':
          description: Internal server error
  /organizations/{name}/users:
    get:
      summary: Get users by organizationName
      operationId: getUsersByOrganizationName
      tags:
        - Organizations
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Users details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users:
    get:
      summary: Get all users
      operationId: getAllUsers
      tags:
        - Users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a user
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Get a user by ID
      operationId: getUserById
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update a user by ID
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      summary: Delete a user by ID
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted
  /organizations/{name}/clients:
    get:
      summary: Get all clients
      operationId: getAllClientsByOrganizationName
      tags:
        - Clients
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
    post:
      summary: Create a new client
      operationId: createClientByOrganizationName
      tags:
        - Clients
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        '201':
          description: Client created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
  /organizations/{name}/resources:
    get:
      summary: Get all resources
      operationId: getAllResourcesByOrganizationName
      tags:
        - Resources
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of resources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
    post:
      summary: Create a new resource
      operationId: createResourceByOrganizationName
      tags:
        - Resources
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '201':
          description: Resource created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
  /organizations/{name}/clients/{id}/projects:
    get:
      summary: Get all projects related to a client
      operationId: getAllProjectsByOrganizationNameAndClientId
      tags:
        - Projects
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    post:
      summary: Create a new project
      operationId: createProjectByOrganizationNameAndClientId
      tags:
        - Projects
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: Resource created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
  /organizations/{name}/clients/{id}:
    get:
      summary: Get a client by ID
      operationId: getClientByOrganizationNameAndClientId
      tags:
        - Clients
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Client details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '404':
          description: Client not found
    put:
      summary: Update a client by ID
      operationId: updateClientByOrganizationNameAndClientId
      tags:
        - Clients
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        '200':
          description: Client updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
    delete:
      summary: Delete a client by ID
      operationId: deleteClientByOrganizationNameAndClientId
      tags:
        - Clients
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Client deleted successfully
components:
  schemas:
    Project:
      type: object
      properties:
        id:
          type: integer
          description: The id of the project
        name:
          type: string
          description: The name of the project
        revenue:
          type: number
          format: double
          description: The revenue expected for the project
        cci:
          type: number
          format: double
          description: The cci expected for the project
        startDate:
          type: string
          example: "2021-01-01"
        endDate:
          type: string
          example: "2021-01-01"
    Organization:
      type: object
      properties:
        id:
          type: integer
          description: The id of the organization
        name:
          type: string
          description: The name of the organization
        email:
          type: string
          format: email
          description: The email address of the organization
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        organization:
          $ref: '#/components/schemas/Organization'
    Client:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    Resource:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        level:
          enum:
            - Analyst
            - Consultant
            - Manager
            - Senior Manager
            - Managing Director
        lcr:
          type: number
          format: double
        chargeability:
          type: number
          format: double
